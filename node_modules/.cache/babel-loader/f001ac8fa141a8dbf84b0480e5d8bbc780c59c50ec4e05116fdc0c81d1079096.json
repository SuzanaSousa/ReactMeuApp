{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\php_fatec\\\\arquivos_site\\\\ReactMeuApp\\\\ReactMeuApp\\\\src\\\\Calculadora\\\\Calculator\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Display from \"../Display/index\";\nimport Button from \"../Button/index\";\nimport \"../CSS/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calculator = () => {\n  _s();\n  const [currentInput, setCurrentInput] = useState('');\n  const handleButtonClick = button => {\n    function add_numero(numero) {\n      if (currentInput === '0' || currentInput === 'Erro') {\n        currentInput = numero.toString();\n      } else {\n        currentInput += numero.toString();\n      }\n      updateDisplay();\n    }\n\n    // Função para adicionar um operador ao visor\n    function add_operador(op) {\n      if (operator !== '') {\n        total();\n      }\n      operator = op;\n      history = currentInput + ' ' + op;\n      currentInput = '0';\n      updateDisplay();\n    }\n    let newValue = currentInput;\n    switch (button) {\n      case '=':\n        newValue = calcularResultado(newValue);\n        break;\n      case 'C':\n        newValue = '';\n        break;\n      case '+/-':\n        newValue = (parseFloat(newValue) * -1).toString();\n        break;\n      case '%':\n        newValue = (parseFloat(newValue) / 100).toString();\n        break;\n      case '←':\n        newValue = newValue.slice(0, -1);\n        break;\n      default:\n        newValue += button;\n    }\n    setCurrentInput(newValue);\n  };\n  const calcularResultado = expression => {\n    try {\n      return eval(expression).toString();\n    } catch (error) {\n      return 'Erro';\n    }\n  };\n  const botoes = ['C', ' +/-', '%', '/', '7', '8', '9', '*', '4', '5', '6', '-', '1', '2', '3', '+', '0', '.', '=', '←'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculadora\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: currentInput,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: botoes.map((botao, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(botao),\n        children: botao\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Calculator, \"GJcx9IF1QDjn3RDPS5putI9udnU=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","Display","Button","jsxDEV","_jsxDEV","Calculator","_s","currentInput","setCurrentInput","handleButtonClick","button","add_numero","numero","toString","updateDisplay","add_operador","op","operator","total","history","newValue","calcularResultado","parseFloat","slice","expression","eval","error","botoes","className","children","type","value","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","map","botao","index","onClick","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/php_fatec/arquivos_site/ReactMeuApp/ReactMeuApp/src/Calculadora/Calculator/index.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Display from \"../Display/index\";\r\nimport Button from \"../Button/index\";\r\nimport \"../CSS/index.css\";\r\n\r\n\r\nconst Calculator = () => {\r\n  const [currentInput, setCurrentInput] = useState('');\r\n  \r\n  const handleButtonClick = (button) => {\r\n    function add_numero(numero) {\r\n  if (currentInput === '0' || currentInput === 'Erro') {\r\n    currentInput = numero.toString();\r\n  } else {\r\n    currentInput += numero.toString();\r\n  }\r\n  updateDisplay();\r\n}\r\n\r\n// Função para adicionar um operador ao visor\r\nfunction add_operador(op) {\r\n  if (operator !== '') {\r\n    total();\r\n  }\r\n  operator = op;\r\n  history = currentInput + ' ' + op;\r\n  currentInput = '0';\r\n  updateDisplay();\r\n}\r\n    let newValue = currentInput;\r\n\r\n    switch (button) {\r\n      case '=':\r\n        newValue = calcularResultado(newValue);\r\n        break;\r\n      case 'C':\r\n        newValue = '';\r\n        break;\r\n      case '+/-':\r\n        newValue = (parseFloat(newValue) * -1).toString();\r\n        break;\r\n      case '%':\r\n        newValue = (parseFloat(newValue) / 100).toString();\r\n        break;\r\n      case '←':\r\n        newValue = newValue.slice(0, -1);\r\n        break;\r\n      default:\r\n        newValue += button;\r\n    }\r\n\r\n    setCurrentInput(newValue);\r\n  };\r\n\r\n  const calcularResultado = (expression) => {\r\n    try {\r\n      return eval(expression).toString();\r\n    } catch (error) {\r\n      return 'Erro';\r\n    }\r\n  };\r\n  \r\n\r\n  const botoes = [\r\n    'C',' +/-','%', '/',\r\n    '7', '8', '9', '*',\r\n    '4', '5', '6', '-',\r\n    '1', '2', '3', '+',\r\n     '0', '.', '=','←',\r\n  ];\r\n\r\n  return (\r\n    <div className=\"calculadora\">\r\n      <input type=\"text\" value={currentInput} readOnly />\r\n      <div className=\"button-container\">\r\n        {botoes.map((botao, index) => (\r\n          <button key={index} onClick={() => handleButtonClick(botao)}>\r\n            {botao}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n\r\n "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}