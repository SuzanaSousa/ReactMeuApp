{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\php_fatec\\\\arquivos_site\\\\ReactMeuApp\\\\ReactMeuApp\\\\src\\\\Calculadora\\\\Calculator\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Display from \"../Display/index\";\nimport Button from \"../Button/index\";\nimport \"../CSS/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calculator = () => {\n  _s();\n  const [currentInput, setCurrentInput] = useState('');\n  const handleButtonClick = button => {\n    // Lógica para tratar os cliques nos botões\n    let newValue = currentInput;\n    switch (button) {\n      case '=':\n        newValue = calcularResultado(newValue);\n        break;\n      case 'C':\n        newValue = '';\n        break;\n      case '+/-':\n        newValue = (parseFloat(newValue) * -1).toString();\n        break;\n      case '%':\n        newValue = (parseFloat(newValue) / 100).toString();\n        break;\n      case '←':\n        newValue = newValue.slice(0, -1);\n        break;\n      default:\n        newValue += button;\n    }\n    setCurrentInput(newValue);\n  };\n  const calcularResultado = expression => {\n    try {\n      return eval(expression).toString();\n    } catch (error) {\n      return 'Erro';\n    }\n  };\n  const botoes = ['C', ' +/-', '%', '/', '7', '8', '9', '*', '4', '5', '6', '-', '1', '2', '3', '+', '0', '.', '=', '←'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculadora\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: currentInput,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: botoes.map((botao, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(botao),\n        children: botao\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n// Variáveis para rastrear o histórico e os valores\n_s(Calculator, \"GJcx9IF1QDjn3RDPS5putI9udnU=\");\n_c = Calculator;\nlet currentInput = '0';\nlet operator = '';\nlet history = '';\n\n// Função para atualizar o visor\nfunction updateDisplay() {\n  document.getElementById('display').value = currentInput;\n  document.getElementById('history').innerText = history;\n}\n\n// Função para adicionar um número ao visor\nfunction add_numero(numero) {\n  if (currentInput === '0' || currentInput === 'Erro') {\n    currentInput = numero.toString();\n  } else {\n    currentInput += numero.toString();\n  }\n  updateDisplay();\n}\n\n// Função para adicionar um operador ao visor\nfunction add_operador(op) {\n  if (operator !== '') {\n    total();\n  }\n  operator = op;\n  history = currentInput + ' ' + op;\n  currentInput = '0';\n  updateDisplay();\n}\n\n// Função para realizar o cálculo\nfunction total() {\n  if (operator === '') {\n    return;\n  }\n  const num1 = parseFloat(history);\n  const num2 = parseFloat(currentInput);\n  switch (operator) {\n    case '+':\n      currentInput = (num1 + num2).toString();\n      break;\n    case '-':\n      currentInput = (num1 - num2).toString();\n      break;\n    case '*':\n      currentInput = (num1 * num2).toString();\n      break;\n    case '/':\n      if (num2 === 0) {\n        currentInput = 'Erro';\n      } else {\n        currentInput = (num1 / num2).toString();\n      }\n      break;\n    case '%':\n      if (num1 !== '%') {\n        currentInput = (num1 * (num2 / 100)).toString();\n      }\n      break;\n  }\n  operator = '';\n  history = '';\n  updateDisplay();\n}\n\n// Função para limpar o visor\nfunction limpar() {\n  currentInput = '0';\n  operator = '';\n  history = '';\n  updateDisplay();\n}\n// Inicialize o visor\nupdateDisplay();\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","Display","Button","jsxDEV","_jsxDEV","Calculator","_s","currentInput","setCurrentInput","handleButtonClick","button","newValue","calcularResultado","parseFloat","toString","slice","expression","eval","error","botoes","className","children","type","value","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","map","botao","index","onClick","_c","operator","history","updateDisplay","document","getElementById","innerText","add_numero","numero","add_operador","op","total","num1","num2","limpar","$RefreshReg$"],"sources":["C:/xampp/htdocs/php_fatec/arquivos_site/ReactMeuApp/ReactMeuApp/src/Calculadora/Calculator/index.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Display from \"../Display/index\";\r\nimport Button from \"../Button/index\";\r\nimport \"../CSS/index.css\";\r\n\r\n\r\nconst Calculator = () => {\r\n  const [currentInput, setCurrentInput] = useState('');\r\n  \r\n  const handleButtonClick = (button) => {\r\n    // Lógica para tratar os cliques nos botões\r\n    let newValue = currentInput;\r\n\r\n    switch (button) {\r\n      case '=':\r\n        newValue = calcularResultado(newValue);\r\n        break;\r\n      case 'C':\r\n        newValue = '';\r\n        break;\r\n      case '+/-':\r\n        newValue = (parseFloat(newValue) * -1).toString();\r\n        break;\r\n      case '%':\r\n        newValue = (parseFloat(newValue) / 100).toString();\r\n        break;\r\n      case '←':\r\n        newValue = newValue.slice(0, -1);\r\n        break;\r\n      default:\r\n        newValue += button;\r\n    }\r\n\r\n    setCurrentInput(newValue);\r\n  };\r\n\r\n  const calcularResultado = (expression) => {\r\n    try {\r\n      return eval(expression).toString();\r\n    } catch (error) {\r\n      return 'Erro';\r\n    }\r\n  };\r\n\r\n  const botoes = [\r\n    'C',' +/-','%', '/',\r\n    '7', '8', '9', '*',\r\n    '4', '5', '6', '-',\r\n    '1', '2', '3', '+',\r\n     '0', '.', '=','←',\r\n  ];\r\n\r\n  return (\r\n    <div className=\"calculadora\">\r\n      <input type=\"text\" value={currentInput} readOnly />\r\n      <div className=\"button-container\">\r\n        {botoes.map((botao, index) => (\r\n          <button key={index} onClick={() => handleButtonClick(botao)}>\r\n            {botao}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Variáveis para rastrear o histórico e os valores\r\nlet currentInput = '0';\r\nlet operator = '';\r\nlet history = '';\r\n\r\n// Função para atualizar o visor\r\nfunction updateDisplay() {\r\n  document.getElementById('display').value = currentInput;\r\n  document.getElementById('history').innerText = history;\r\n}\r\n\r\n// Função para adicionar um número ao visor\r\nfunction add_numero(numero) {\r\n  if (currentInput === '0' || currentInput === 'Erro') {\r\n    currentInput = numero.toString();\r\n  } else {\r\n    currentInput += numero.toString();\r\n  }\r\n  updateDisplay();\r\n}\r\n\r\n// Função para adicionar um operador ao visor\r\nfunction add_operador(op) {\r\n  if (operator !== '') {\r\n    total();\r\n  }\r\n  operator = op;\r\n  history = currentInput + ' ' + op;\r\n  currentInput = '0';\r\n  updateDisplay();\r\n}\r\n\r\n// Função para realizar o cálculo\r\nfunction total() {\r\n  if (operator === '') {\r\n    return;\r\n  }\r\n  const num1 = parseFloat(history);\r\n  const num2 = parseFloat(currentInput);\r\n  switch (operator) {\r\n    case '+':\r\n      currentInput = (num1 + num2).toString();\r\n      break;\r\n    case '-':\r\n      currentInput = (num1 - num2).toString();\r\n      break;\r\n    case '*':\r\n      currentInput = (num1 * num2).toString();\r\n      break;\r\n    case '/':\r\n      if (num2 === 0) {\r\n        currentInput = 'Erro';\r\n      } else {\r\n        currentInput = (num1 / num2).toString();\r\n      }\r\n      break;\r\n      case '%':\r\n        if (num1 !== '%') {\r\n            currentInput = (num1 * (num2 / 100)).toString();\r\n          }\r\n        break;\r\n       \r\n  }\r\n  operator = '';\r\n  history = '';\r\n  updateDisplay();\r\n}\r\n\r\n// Função para limpar o visor\r\nfunction limpar() {\r\n  currentInput = '0';\r\n  operator = '';\r\n  history = '';\r\n  updateDisplay();\r\n}\r\n// Inicialize o visor\r\nupdateDisplay();\r\nexport default Calculator;\r\n\r\n "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMS,iBAAiB,GAAIC,MAAM,IAAK;IACpC;IACA,IAAIC,QAAQ,GAAGJ,YAAY;IAE3B,QAAQG,MAAM;MACZ,KAAK,GAAG;QACNC,QAAQ,GAAGC,iBAAiB,CAACD,QAAQ,CAAC;QACtC;MACF,KAAK,GAAG;QACNA,QAAQ,GAAG,EAAE;QACb;MACF,KAAK,KAAK;QACRA,QAAQ,GAAG,CAACE,UAAU,CAACF,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAEG,QAAQ,CAAC,CAAC;QACjD;MACF,KAAK,GAAG;QACNH,QAAQ,GAAG,CAACE,UAAU,CAACF,QAAQ,CAAC,GAAG,GAAG,EAAEG,QAAQ,CAAC,CAAC;QAClD;MACF,KAAK,GAAG;QACNH,QAAQ,GAAGA,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChC;MACF;QACEJ,QAAQ,IAAID,MAAM;IACtB;IAEAF,eAAe,CAACG,QAAQ,CAAC;EAC3B,CAAC;EAED,MAAMC,iBAAiB,GAAII,UAAU,IAAK;IACxC,IAAI;MACF,OAAOC,IAAI,CAACD,UAAU,CAAC,CAACF,QAAQ,CAAC,CAAC;IACpC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO,MAAM;IACf;EACF,CAAC;EAED,MAAMC,MAAM,GAAG,CACb,GAAG,EAAC,MAAM,EAAC,GAAG,EAAE,GAAG,EACnB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAClB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAClB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACjB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,GAAG,CACnB;EAED,oBACEf,OAAA;IAAKgB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BjB,OAAA;MAAOkB,IAAI,EAAC,MAAM;MAACC,KAAK,EAAEhB,YAAa;MAACiB,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnDxB,OAAA;MAAKgB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9BF,MAAM,CAACU,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvB3B,OAAA;QAAoB4B,OAAO,EAAEA,CAAA,KAAMvB,iBAAiB,CAACqB,KAAK,CAAE;QAAAT,QAAA,EACzDS;MAAK,GADKC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAAtB,EAAA,CA5DMD,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AA6DhB,IAAIE,YAAY,GAAG,GAAG;AACtB,IAAI2B,QAAQ,GAAG,EAAE;AACjB,IAAIC,OAAO,GAAG,EAAE;;AAEhB;AACA,SAASC,aAAaA,CAAA,EAAG;EACvBC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACf,KAAK,GAAGhB,YAAY;EACvD8B,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,SAAS,GAAGJ,OAAO;AACxD;;AAEA;AACA,SAASK,UAAUA,CAACC,MAAM,EAAE;EAC1B,IAAIlC,YAAY,KAAK,GAAG,IAAIA,YAAY,KAAK,MAAM,EAAE;IACnDA,YAAY,GAAGkC,MAAM,CAAC3B,QAAQ,CAAC,CAAC;EAClC,CAAC,MAAM;IACLP,YAAY,IAAIkC,MAAM,CAAC3B,QAAQ,CAAC,CAAC;EACnC;EACAsB,aAAa,CAAC,CAAC;AACjB;;AAEA;AACA,SAASM,YAAYA,CAACC,EAAE,EAAE;EACxB,IAAIT,QAAQ,KAAK,EAAE,EAAE;IACnBU,KAAK,CAAC,CAAC;EACT;EACAV,QAAQ,GAAGS,EAAE;EACbR,OAAO,GAAG5B,YAAY,GAAG,GAAG,GAAGoC,EAAE;EACjCpC,YAAY,GAAG,GAAG;EAClB6B,aAAa,CAAC,CAAC;AACjB;;AAEA;AACA,SAASQ,KAAKA,CAAA,EAAG;EACf,IAAIV,QAAQ,KAAK,EAAE,EAAE;IACnB;EACF;EACA,MAAMW,IAAI,GAAGhC,UAAU,CAACsB,OAAO,CAAC;EAChC,MAAMW,IAAI,GAAGjC,UAAU,CAACN,YAAY,CAAC;EACrC,QAAQ2B,QAAQ;IACd,KAAK,GAAG;MACN3B,YAAY,GAAG,CAACsC,IAAI,GAAGC,IAAI,EAAEhC,QAAQ,CAAC,CAAC;MACvC;IACF,KAAK,GAAG;MACNP,YAAY,GAAG,CAACsC,IAAI,GAAGC,IAAI,EAAEhC,QAAQ,CAAC,CAAC;MACvC;IACF,KAAK,GAAG;MACNP,YAAY,GAAG,CAACsC,IAAI,GAAGC,IAAI,EAAEhC,QAAQ,CAAC,CAAC;MACvC;IACF,KAAK,GAAG;MACN,IAAIgC,IAAI,KAAK,CAAC,EAAE;QACdvC,YAAY,GAAG,MAAM;MACvB,CAAC,MAAM;QACLA,YAAY,GAAG,CAACsC,IAAI,GAAGC,IAAI,EAAEhC,QAAQ,CAAC,CAAC;MACzC;MACA;IACA,KAAK,GAAG;MACN,IAAI+B,IAAI,KAAK,GAAG,EAAE;QACdtC,YAAY,GAAG,CAACsC,IAAI,IAAIC,IAAI,GAAG,GAAG,CAAC,EAAEhC,QAAQ,CAAC,CAAC;MACjD;MACF;EAEN;EACAoB,QAAQ,GAAG,EAAE;EACbC,OAAO,GAAG,EAAE;EACZC,aAAa,CAAC,CAAC;AACjB;;AAEA;AACA,SAASW,MAAMA,CAAA,EAAG;EAChBxC,YAAY,GAAG,GAAG;EAClB2B,QAAQ,GAAG,EAAE;EACbC,OAAO,GAAG,EAAE;EACZC,aAAa,CAAC,CAAC;AACjB;AACA;AACAA,aAAa,CAAC,CAAC;AACf,eAAe/B,UAAU;AAAC,IAAA4B,EAAA;AAAAe,YAAA,CAAAf,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}